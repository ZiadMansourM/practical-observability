extensions:
  zpages:
    endpoint: otel-collector:55679
  health_check:
  # pprof:
  
  # file_storage/otc:
  #   directory: /var/lib/storage/otc
  #   timeout: 10s

receivers:
  filelog:
    include:
    # - /log.log
    - /var/lib/docker/containers/*/*-json.log
    include_file_path: true
    include_file_name: false
    start_at: beginning
    multiline:
      line_start_pattern: '^\{'
    # operators:
    # - id: parse-log-message
    #   type: json_parser
    #   parse_from: log
    # - id: re-labelling
    #   type: metadata
    #   resource:
    #     service.name: EXPR($$.attrs.tag)
    #     # log.level: EXPR($$.log_level)
    #     # log.timestamp: EXPR($$.log_ts)
    #     stream: EXPR($$.stream)

  otlp:
    protocols:
      grpc:
        endpoint: otel-collector:4317
      http:
        endpoint: otel-collector:4318

  hostmetrics:
    scrapers:
      cpu:
      disk:
      filesystem:
      load:
      memory:
      network:
      process:
      processes:
      paging:

  prometheus:
    config:
      global:
        scrape_interval: 15s
        scrape_timeout: 10s
      scrape_configs:
      - job_name: 'otel-collector'
        static_configs:
        - targets: ['otel-collector:8888']
      - job_name: 'loki'
        static_configs:
        - targets: ['loki:3100']
      - job_name: 'mimir'
        static_configs:
        - targets: ["mimir:8080"]

processors:
  attributes/source-type-attr:
    actions:
    - action: insert
      key: source
      value: docker

  resource/source-type-attr:
    # actions: insert, update, upsert, delete, hash, extract, convert.
    attributes:
    - key: source.type
      value: docker
      action: upsert
  
  resource/source-location-attr:
    # actions: insert, update, upsert, delete, hash, extract, convert.
    attributes:
    - key: source.location
      value: ziad-mac
      action: upsert

  batch:
    # send_batch_size: 1000
    # timeout: 10s

  transform/add-service-name:
    flatten_data: true
    error_mode: ignore
    log_statements:
    - context: log
      statements:
      - set(attributes["log.record.original"], body)
      - merge_maps(cache, ParseJSON(body), "upsert")
      - set(resource.attributes["service.name"], cache["attrs"]["tag"])
      - set(body, cache["log"])
      - set(attributes["log.iostream"], cache["stream"])
      - set(attributes["timestamp"], cache["time"])
      - set(time_unix_nano, Int(cache["time"]))

exporters:  
  debug:
    verbosity: detailed
    # sampling_initial: 5
    # sampling_thereafter: 200

  # File Exporter: ingest logs to local file
  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/fileexporter
  # file:
  #   path: ./app42_example.log
  #   rotation:

  otlphttp/logs:
    endpoint: http://loki:3100/otlp
    tls:
      insecure: true

  otlp/traces:
    endpoint: tempo:4317
    tls:
      insecure: true
    # sending_queue:
    #   storage: file_storage/otc

  otlphttp/metrics:
    endpoint: http://mimir:8080/otlp
    tls:
      insecure: true
  
  prometheusremotewrite:
    endpoint: http://mimir:8080/api/v1/push
    tls:
      insecure: true
    # headers:
    #   X-Scope-OrgID: demo


service:
  # extensions: [zpages, health_check]
  # extensions: [zpages, health_check, file_storage]

  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlp/traces]
    logs:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlphttp/logs]
    logs/filelog:
      receivers: [filelog]
      processors: [resource/source-type-attr, resource/source-location-attr, transform/add-service-name]
      exporters: [otlphttp/logs]
      # exporters: [debug]
    metrics:
      receivers: [otlp, prometheus]
      processors: [batch]
      exporters: [otlphttp/metrics]
    # metrics/hostmetrics:
    #   receivers: [hostmetrics]
    #   processors: [resource/source-location-attr]
    #   exporters: [otlphttp/metrics]
      # exporters: [debug]

  telemetry:
    metrics:
      readers:
      - pull:
          exporter:
            prometheus:
              host: 'otel-collector'
              port: 8888
    logs:
      # level: debug
      processors:
      - batch:
          exporter:
            otlp:
              protocol: http/protobuf
              endpoint: http://otel-collector:4318
